{"version":3,"file":"script.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;ACNa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAO,CAAC,wCAAe;AACvB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,mFAAmF,KAAK,SAAS,OAAO;AACxG,8EAA8E,KAAK,SAAS,OAAO;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,6CAA6C;AAC7C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://weatherforecastapp/./src/styles.scss?029a","webpack://weatherforecastapp/webpack/bootstrap","webpack://weatherforecastapp/webpack/runtime/make namespace object","webpack://weatherforecastapp/./src/script.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./styles.scss\");\nlet fullForecastData = null; //to store full forecast data globally\n// Function to toggle the navigation menu\nfunction toggleNavMenu() {\n    const navbar = document.getElementById('navbar');\n    const navMenuIcon = document.getElementById('navMenuIcon');\n    const navCloseIcon = document.getElementById('navCloseIcon');\n    // Add event listeners to both the menu toggle button and the close button\n    navMenuIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n    navCloseIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n}\n// Call the function to initialize the menu toggle functionality\ntoggleNavMenu();\nfunction getWeather() {\n    const apiKey = \"d33f0ce7a09838a09d8022ab1acae3d1\";\n    const city = document.getElementById(\"idInput\").value;\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    const inputField = document.getElementById(\"idInput\");\n    // Clear any previous error message and reset input field border\n    errorMessageDiv.style.display = 'none';\n    inputField.style.border = '1px solid #ccc';\n    if (!city) {\n        alert(\"Please enter a city.\"); // Display error if no city is entered\n        return;\n    }\n    const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;\n    // Fetch current weather\n    fetch(currentWeatherUrl)\n        .then(response => response.json())\n        .then(currentWeatherData => {\n        if (currentWeatherData.cod !== 200) {\n            throw new Error(currentWeatherData.message);\n        }\n        console.log(\"Current Weather Data:\", currentWeatherData); // Log the API response\n        // Fetch forecast data\n        return fetch(forecastUrl).then(response => response.json())\n            .then(forecastData => {\n            if (forecastData.cod !== \"200\") {\n                throw new Error(forecastData.message);\n            }\n            console.log(\"Forecast Data:\", forecastData); // Log the API response\n            fullForecastData = forecastData; // Store forecast data globally\n        });\n    })\n        .catch(error => {\n        console.error('Error fetching weather data:', error);\n        alert('Failed to fetch weather data. Please try again.');\n    });\n}\n"],"names":[],"sourceRoot":""}