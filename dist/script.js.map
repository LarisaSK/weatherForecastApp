{"version":3,"file":"script.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;ACNa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAO,CAAC,wCAAe;AACvB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,mFAAmF,KAAK,SAAS,OAAO;AACxG,8EAA8E,KAAK,SAAS,OAAO;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,6CAA6C;AAC7C,gCAAgC;AAChC,6GAA6G;AAC7G,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,aAAa;AACjF;AACA;AACA;AACA;AACA,yDAAyD,qBAAqB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO,OAAO;AACtC,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE,+DAA+D,mBAAmB;AAClF,6DAA6D,4BAA4B;AACzF,iEAAiE,gBAAgB;AACjF;AACA,gEAAgE,KAAK,GAAG,uBAAuB,EAAE,OAAO;AACxG,uFAAuF,KAAK,GAAG,uBAAuB,EAAE,OAAO;AAC/H;AACA;AACA,0BAA0B,YAAY;AACtC;AACA,0BAA0B,QAAQ;AAClC,8BAA8B,SAAS;AACvC,0BAA0B,UAAU;AACpC,2BAA2B,cAAc;AACzC,iCAAiC,4BAA4B;AAC7D,0BAA0B,cAAc;AACxC,oBAAoB,UAAU;AAC9B,wBAAwB,QAAQ;AAChC,oBAAoB,YAAY;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C,sCAAsC;AACtC,2CAA2C;AAC3C,2DAA2D,iBAAiB;AAC5E,2DAA2D,gCAAgC;AAC3F,uCAAuC,SAAS,EAAE,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6IAA6I,iCAAiC;AAC9K;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,SAAS,OAAO,UAAU,iBAAiB,OAAO;AACtI;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,UAAU,mCAAmC,cAAc,QAAQ;AACnE,UAAU,qCAAqC,iBAAiB,SAAS;AACzE,UAAU,qCAAqC,iBAAiB,OAAO;AACvE,UAAU,oCAAoC,UAAU,OAAO;AAC/D,UAAU;AACV;AACA,0CAA0C,cAAc;AACxD,wDAAwD;AACxD,UAAU;AACV;AACA,0CAA0C,gBAAgB;AAC1D,0DAA0D;AAC1D,UAAU;AACV;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://weatherforecastapp/./src/styles.scss?029a","webpack://weatherforecastapp/webpack/bootstrap","webpack://weatherforecastapp/webpack/runtime/make namespace object","webpack://weatherforecastapp/./src/script.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./styles.scss\");\nlet fullForecastData = null; //to store full forecast data globally\n// Function to fetch current weather and forecast data\nfunction getWeather() {\n    const apiKey = \"d33f0ce7a09838a09d8022ab1acae3d1\";\n    const city = document.getElementById(\"idInput\").value;\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    const inputField = document.getElementById(\"idInput\");\n    // Clear any previous error message and reset input field border\n    errorMessageDiv.style.display = 'none';\n    inputField.style.border = '1px solid #ccc';\n    if (!city) {\n        displayErrorMessage(\"Please enter a city.\"); // Display error if no city is entered\n        return;\n    }\n    const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;\n    // Fetch current weather\n    fetch(currentWeatherUrl)\n        .then(response => response.json())\n        .then(currentWeatherData => {\n        if (currentWeatherData.cod !== 200) {\n            throw new Error(currentWeatherData.message);\n        }\n        console.log(\"Current Weather Data:\", currentWeatherData); // Log the API response\n        loadFetchedWeatherData(currentWeatherData);\n        // Fetch forecast data\n        return fetch(forecastUrl).then(response => response.json())\n            .then(forecastData => {\n            if (forecastData.cod !== \"200\") {\n                throw new Error(forecastData.message);\n            }\n            console.log(\"Forecast Data:\", forecastData); // Log the API response\n            fullForecastData = forecastData; // Store forecast data globally\n            updateDatesInNav(); // Update dates after fetching data\n            displayHourlyForecast(forecastData, new Date(), forecastData.city.timezone, currentWeatherData); // Pass timezone offset and current weather\n        });\n    })\n        .catch(error => {\n        console.error('Error fetching weather data:', error);\n        displayErrorMessage('Failed to fetch weather data. Please try again.');\n    });\n}\nfunction displayErrorMessage(message) {\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    errorMessageDiv.textContent = message;\n    errorMessageDiv.style.display = 'block';\n}\n// Function to display weather information\nfunction loadFetchedWeatherData(data) {\n    if (data.cod === '404') {\n        document.getElementById(\"descriptionDiv\").innerHTML = `<p>${data.message}</p>`;\n    }\n    else {\n        const weatherData = {\n            temperature: Math.round(data.main.temp - 273.15),\n            iconUrl: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\n            description: data.weather[0].description,\n            humidity: data.main.humidity,\n            windSpeed: Math.round(data.wind.speed),\n            cloudCoverage: data.clouds.all,\n            time: getLocalTime(new Date(), data.timezone).toLocaleTimeString(),\n            cityName: data.name\n        };\n        renderWeatherElements(weatherData);\n        showImage();\n    }\n}\n// Function to calculate the local time in the city based on the user's local time and the city's timezone offset\nfunction getLocalTime(date, cityTimezoneOffset) {\n    // Get user's local time offset in minutes and convert it to milliseconds\n    const userTimezoneOffsetMs = date.getTimezoneOffset() * 60000;\n    // Adjust date by the difference in timezone offsets\n    const utcTime = date.getTime() + userTimezoneOffsetMs;\n    const cityTime = new Date(utcTime + cityTimezoneOffset * 1000);\n    return cityTime;\n}\nfunction displayHourlyForecast(hourlyData, selectedDate, timezoneOffset, currentWeatherData) {\n    const hourlyForecastSection = document.getElementById(\"hourlyForecastSection\");\n    hourlyForecastSection.innerHTML = ''; // Clear previous forecast data\n    const now = new Date(); // Get the current date and time\n    const selectedDateString = selectedDate.toISOString().split('T')[0];\n    const isToday = now.toISOString().split('T')[0] === selectedDateString;\n    let filteredData = [];\n    if (isToday) {\n        // Use the current weather data for the \"Now\" section\n        const currentWeather = {\n            dt: currentWeatherData.dt,\n            main: currentWeatherData.main,\n            weather: currentWeatherData.weather,\n            clouds: currentWeatherData.clouds,\n            wind: currentWeatherData.wind\n        };\n        filteredData.push(currentWeather);\n        // Add the forecasts for the next 24 hours in 3-hour intervals\n        for (let i = 0; i < 8; i++) { // 8 intervals of 3 hours cover 24 hours\n            const targetTime = new Date(now.getTime() + (i + 1) * 3 * 60 * 60 * 1000); // Increment by 3 hours\n            // Find the closest time match\n            let closestItem = hourlyData.list.reduce((prev, curr) => {\n                const prevTimeDiff = Math.abs(new Date(prev.dt * 1000).getTime() - targetTime.getTime());\n                const currTimeDiff = Math.abs(new Date(curr.dt * 1000).getTime() - targetTime.getTime());\n                return (currTimeDiff < prevTimeDiff ? curr : prev);\n            });\n            filteredData.push(closestItem);\n        }\n    }\n    else {\n        // For other days, retain the original 3-hour interval forecast\n        filteredData = hourlyData.list.filter((item) => {\n            const itemDate = new Date(item.dt * 1000);\n            return itemDate.toISOString().split('T')[0] === selectedDateString;\n        });\n    }\n    // Render the forecast items\n    filteredData.forEach((item, index) => {\n        const dateTime = new Date(item.dt * 1000);\n        const localTime = getLocalTime(dateTime, timezoneOffset); // Adjust for the correct timezone\n        const hour = localTime.getHours();\n        const minute = localTime.getMinutes();\n        const temperature = item.main.temp !== undefined ? Math.round(item.main.temp - 273.15) : '--';\n        const iconCode = item.weather[0].icon;\n        const iconUrl = `http://openweathermap.org/img/wn/${iconCode}@2x.png`;\n        const humidity = item.main.humidity !== undefined ? `${item.main.humidity}` : '--';\n        const windSpeed = item.wind.speed !== undefined ? `${Math.round(item.wind.speed)}` : '--';\n        const cloudCoverage = item.clouds.all !== undefined ? `${item.clouds.all}` : '0%';\n        // Label the first item as \"Now\" and ensure it shows the current time\n        const timeLabel = (isToday && index === 0) ? 'Now' : `${hour}:${minute < 10 ? '0' : ''}${minute}`;\n        const displayedTime = (isToday && index === 0) ? now.toLocaleTimeString() : `${hour}:${minute < 10 ? '0' : ''}${minute}`;\n        const hourlyItemHTML = `\r\n        <div class=\"hourlyItem\" \r\n             data-temp=\"${temperature}\" \r\n             tabindex=\"0\"\r\n             data-icon=\"${iconUrl}\" \r\n             data-humidity=\"${humidity}\" \r\n             data-wind=\"${windSpeed}\" \r\n             data-cloud=\"${cloudCoverage}\" \r\n             data-description=\"${item.weather[0].description}\" \r\n             data-time=\"${displayedTime}\"> <!-- Use displayedTime here -->\r\n            <span>${timeLabel}</span>\r\n            <img src=\"${iconUrl}\" alt=\"Hourly weather Icon\">\r\n            <span>${temperature}°C</span>\r\n        </div>`;\n        hourlyForecastSection.innerHTML += hourlyItemHTML;\n    });\n    // Set up click events for the hourly items in the forecast section\n    setUpHourlyClickEvents();\n}\n// Setting click events for hourly items to show weather data\nfunction setUpHourlyClickEvents() {\n    const hourlyItems = document.querySelectorAll('.hourlyItem');\n    hourlyItems.forEach((hourlyElement) => {\n        hourlyElement.addEventListener('click', () => {\n            // Remove 'active' class from all hourly items\n            hourlyItems.forEach(item => item.classList.remove('active'));\n            // Add 'active' class to the clicked hourly item\n            hourlyElement.classList.add('active');\n            // Update the weather display based on the clicked hourly item\n            const temperature = hourlyElement.getAttribute('data-temp') || '';\n            const iconUrl = hourlyElement.getAttribute('data-icon') || '';\n            const humidity = hourlyElement.getAttribute('data-humidity') || '';\n            const windSpeed = hourlyElement.getAttribute('data-wind') || '';\n            const cloudCoverage = hourlyElement.getAttribute('data-cloud') || '';\n            const description = hourlyElement.getAttribute('data-description') || '';\n            const time = hourlyElement.getAttribute('data-time') || '';\n            const cityName = document.getElementById('cityNameDiv').textContent || '';\n            // Update the main weather display\n            updateMainWeatherDisplay(temperature, iconUrl, humidity, windSpeed, cloudCoverage, description, time, cityName);\n        });\n    });\n}\n// Updating air details section based on clicked hourlyItem\nfunction updateMainWeatherDisplay(temperature, iconUrl, humidity, windSpeed, cloudCoverage, description, time, cityName) {\n    const weatherData = {\n        temperature,\n        iconUrl,\n        description,\n        humidity,\n        windSpeed,\n        cloudCoverage,\n        time,\n        cityName\n    };\n    renderWeatherElements(weatherData);\n}\n// Function to update dates in the navigation menu\nfunction updateDatesInNav() {\n    const forecastDays = document.querySelectorAll('.forecastDays');\n    const today = new Date();\n    for (let i = 0; i < forecastDays.length; i++) {\n        const date = new Date(today); // Create a new Date object based on today\n        date.setDate(today.getDate() + i); // Increment the date for each iteration\n        const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });\n        const dayDate = date.toLocaleDateString('en-US', { day: '2-digit', month: 'short' });\n        forecastDays[i].innerText = `${dayName} ${dayDate}`;\n    }\n}\n// Function to set up click events for navigation items\nfunction setUpNavClickEvents() {\n    const forecastDays = document.querySelectorAll('.forecastDays');\n    forecastDays.forEach((dayElement, index) => {\n        dayElement.addEventListener('click', () => {\n            // Remove 'active' class from all forecast days\n            forecastDays.forEach(day => day.classList.remove('active'));\n            // Add 'active' class to the clicked day\n            dayElement.classList.add('active');\n            const isToday = index === 0;\n            if (isToday) {\n                // Force refetch the current weather data for today to ensure it's up-to-date\n                getWeather();\n            }\n            else if (fullForecastData) {\n                const selectedDate = new Date();\n                selectedDate.setDate(selectedDate.getDate() + index);\n                // Display hourly forecast for the selected date\n                displayHourlyForecast(fullForecastData, selectedDate, fullForecastData.city.timezone, null);\n                const earliestForecast = fullForecastData.list.find((item) => {\n                    const itemDate = new Date(item.dt * 1000);\n                    return itemDate.toISOString().split('T')[0] === selectedDate.toISOString().split('T')[0];\n                });\n                if (earliestForecast) {\n                    updateMainWeatherDisplay(Math.round(earliestForecast.main.temp - 273.15).toString(), `http://openweathermap.org/img/wn/${earliestForecast.weather[0].icon}@2x.png`, earliestForecast.main.humidity.toString(), Math.round(earliestForecast.wind.speed).toString(), earliestForecast.clouds.all.toString(), earliestForecast.weather[0].description, new Date(earliestForecast.dt * 1000).toLocaleTimeString(), fullForecastData.city.name);\n                }\n            }\n        });\n    });\n}\nfunction showImage() {\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    weatherIcon.style.display = \"inline-block\";\n}\n// Only display weather when the searchBtn is clicked while the btn has class btn_active\nlet btn = document.getElementById(\"idBtn\");\nlet input = document.getElementById(\"idInput\");\nbtn.addEventListener(\"click\", function () {\n    this.classList.toggle(\"btn_active\");\n    input.classList.toggle(\"input_active\");\n    if (!this.classList.contains(\"btn_active\")) {\n        getWeather();\n    }\n    else {\n        input.focus();\n        input.value = '';\n    }\n});\nfunction getUserLocation() {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            reverseGeocode(latitude, longitude);\n        }, error => {\n            console.error(\"Error getting location:\", error);\n            alert(\"Unable to retrieve your location. Please enter your city manually.\");\n        });\n    }\n    else {\n        alert(\"Geolocation is not supported by your browser. Please enter your city manually.\");\n    }\n}\nfunction reverseGeocode(latitude, longitude) {\n    const apiKey = \"d33f0ce7a09838a09d8022ab1acae3d1\";\n    const reverseGeocodeUrl = `https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${apiKey}`;\n    fetch(reverseGeocodeUrl)\n        .then(response => response.json())\n        .then(data => {\n        if (data && data.length > 0) {\n            const city = data[0].name;\n            document.getElementById(\"idInput\").value = city; // Update the input field with the city name\n            getWeather(); // Fetch weather for the detected city\n        }\n        else {\n            displayErrorMessage(\"Could not determine city from your location. Please enter your city manually.\");\n        }\n    })\n        .catch(error => {\n        console.error(\"Error during reverse geocoding:\", error);\n        displayErrorMessage(\"Failed to get city name from your location. Please enter your city manually.\");\n    });\n}\nfunction toggleNavMenu() {\n    const navbar = document.getElementById('navbar');\n    const navMenuIcon = document.getElementById('navMenuIcon');\n    const navCloseIcon = document.getElementById('navCloseIcon');\n    // Add event listeners to both the menu toggle button and the close button\n    navMenuIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n    navCloseIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n}\n// Call the function to initialize the menu toggle functionality\ntoggleNavMenu();\n// Focus event listener for the hourly items\nfunction focusHourlyItems() {\n    const hourlyItems = document.querySelectorAll('.hourlyItem');\n    hourlyItems.forEach(item => {\n        item.addEventListener('click', () => {\n            // Remove 'active' class from all items\n            hourlyItems.forEach(item => item.classList.remove('active'));\n            // Add 'active' class to the clicked item\n            item.classList.add('active');\n        });\n    });\n}\nfunction renderWeatherElements(data) {\n    const elementsConfig = [\n        { id: \"cityNameDiv\", content: `<h2>${data.cityName}</h2>` },\n        { id: \"temperatureDiv\", content: `<p>${data.temperature}°C</p>` },\n        { id: \"descriptionDiv\", content: `<p>${data.description}</p>` },\n        { id: \"timeDiv\", content: `<p>Time: ${data.time}</p>` },\n        { id: \"humiditySection\", content: `\r\n            <span class=\"airInfoDetail material-icons\">water_drop</span>\r\n            <span class=\"airInfoDetail\">${data.humidity}%</span>\r\n            <div class=\"airInfoDetail\">Humidity</div>` },\n        { id: \"windSpeedSection\", content: `\r\n            <span class=\"airInfoDetail material-icons\">air</span>\r\n            <span class=\"airInfoDetail\">${data.windSpeed} m/s</span>\r\n            <div class=\"airInfoDetail\">Wind speed</div>` },\n        { id: \"cloudCoverageSection\", content: `\r\n            <span class=\"airInfoDetail material-icons\">cloud</span>\r\n            <span class=\"airInfoDetail\">${data.cloudCoverage}%</span>\r\n            <div class=\"airInfoDetail\">Cloud coverage</div>` }\n    ];\n    // Update innerHTML for each element\n    elementsConfig.forEach(({ id, content }) => {\n        const element = document.getElementById(id);\n        if (element) {\n            element.innerHTML = content;\n        }\n    });\n    // Update the weather icon separately\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    if (weatherIcon) {\n        weatherIcon.src = data.iconUrl;\n        weatherIcon.alt = data.description;\n    }\n}\n// Initialize functions on page load\nfunction init() {\n    getUserLocation();\n    updateDatesInNav();\n    setUpNavClickEvents();\n    focusHourlyItems();\n}\n// Initialize everything on page load\ninit();\n"],"names":[],"sourceRoot":""}