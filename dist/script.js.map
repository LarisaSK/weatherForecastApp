{"version":3,"file":"script.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;ACNa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAO,CAAC,wCAAe;AACvB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,mFAAmF,KAAK,SAAS,OAAO;AACxG,8EAA8E,KAAK,SAAS,OAAO;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,6CAA6C;AAC7C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,uDAAuD;AACvD;AACA;AACA,4DAA4D,SAAS;AACrE;AACA,gCAAgC,SAAS;AACzC,sCAAsC,YAAY;AAClD,sCAAsC,YAAY;AAClD;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAmC,cAAc,QAAQ;AACnE,UAAU,qCAAqC,iBAAiB,SAAS;AACzE,UAAU,qCAAqC,iBAAiB,OAAO;AACvE,UAAU,oCAAoC,UAAU,OAAO;AAC/D,UAAU;AACV;AACA,0CAA0C,cAAc;AACxD,wDAAwD;AACxD,UAAU;AACV;AACA,0CAA0C,gBAAgB;AAC1D,0DAA0D;AAC1D,UAAU;AACV;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://weatherforecastapp/./src/styles.scss?029a","webpack://weatherforecastapp/webpack/bootstrap","webpack://weatherforecastapp/webpack/runtime/make namespace object","webpack://weatherforecastapp/./src/script.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./styles.scss\");\nlet fullForecastData = null; //to store full forecast data globally\n// Function to toggle the navigation menu\nfunction toggleNavMenu() {\n    const navbar = document.getElementById('navbar');\n    const navMenuIcon = document.getElementById('navMenuIcon');\n    const navCloseIcon = document.getElementById('navCloseIcon');\n    // Add event listeners to both the menu toggle button and the close button\n    navMenuIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n    navCloseIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n}\n// Call the function to initialize the menu toggle functionality\ntoggleNavMenu();\nfunction getWeather() {\n    const apiKey = \"d33f0ce7a09838a09d8022ab1acae3d1\";\n    const city = document.getElementById(\"idInput\").value;\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    const inputField = document.getElementById(\"idInput\");\n    // Clear any previous error message and reset input field border\n    errorMessageDiv.style.display = 'none';\n    inputField.style.border = '1px solid #ccc';\n    if (!city) {\n        displayErrorMessage(\"Please enter a city.\"); // Display error if no city is entered\n        return;\n    }\n    const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;\n    // Fetch current weather\n    fetch(currentWeatherUrl)\n        .then(response => response.json())\n        .then(currentWeatherData => {\n        if (currentWeatherData.cod !== 200) {\n            throw new Error(currentWeatherData.message);\n        }\n        console.log(\"Current Weather Data:\", currentWeatherData); // Log the API response\n        // Fetch forecast data\n        return fetch(forecastUrl).then(response => response.json())\n            .then(forecastData => {\n            if (forecastData.cod !== \"200\") {\n                throw new Error(forecastData.message);\n            }\n            console.log(\"Forecast Data:\", forecastData); // Log the API response\n            fullForecastData = forecastData; // Store forecast data globally\n        });\n    })\n        .catch(error => {\n        console.error('Error fetching weather data:', error);\n        displayErrorMessage('Failed to fetch weather data. Please try again.');\n    });\n}\nfunction loadFetchedWeatherData(data) {\n    const cityNameDiv = document.getElementById(\"cityNameDiv\");\n    const temperatureDiv = document.getElementById(\"temperatureDiv\");\n    const descriptionDiv = document.getElementById(\"descriptionDiv\");\n    const timeDiv = document.getElementById(\"timeDiv\");\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    const humiditySection = document.getElementById(\"humiditySection\");\n    const windSpeedSection = document.getElementById(\"windSpeedSection\");\n    const cloudCoverageSection = document.getElementById(\"cloudCoverageSection\");\n    // Clear previous weather information\n    cityNameDiv.innerHTML = '';\n    temperatureDiv.innerHTML = '';\n    descriptionDiv.innerHTML = '';\n    timeDiv.innerHTML = '';\n    humiditySection.innerHTML = '';\n    windSpeedSection.innerHTML = '';\n    cloudCoverageSection.innerHTML = '';\n    if (data.cod === '404') {\n        descriptionDiv.innerHTML = `<p>${data.message}</p>`;\n    }\n    else {\n        const cityName = data.name;\n        const temperature = Math.round(data.main.temp - 273.15); // Convert Kelvin to Celsius\n        const description = data.weather[0].description;\n        const humidity = data.main.humidity;\n        const windSpeed = Math.round(data.wind.speed); // Round to whole number\n        const cloudCoverage = data.clouds.all;\n        const iconCode = data.weather[0].icon;\n        const iconUrl = `http://openweathermap.org/img/wn/${iconCode}@2x.png`;\n        // Create HTML content\n        const cityHTML = `<h2>${cityName}</h2>`;\n        const temperatureHTML = `<p>${temperature}°C</p>`;\n        const descriptionHTML = `<p>${description}</p>`;\n        const humidityHTML = `\r\n            <span class=\"airInfoDetail material-icons\">water_drop</span>\r\n            <span class=\"airInfoDetail\">${humidity}%</span>\r\n            <div class=\"airInfoDetail\">Humidity</div>`;\n        const windSpeedHTML = `\r\n            <span class=\"airInfoDetail material-icons\">air</span>\r\n            <span class=\"airInfoDetail\">${windSpeed} m/s</span>\r\n            <div class=\"airInfoDetail\">Wind speed</div>`;\n        const cloudCoverageHTML = `\r\n            <span class=\"airInfoDetail material-icons\">cloud</span>\r\n            <span class=\"airInfoDetail\">${cloudCoverage}%</span>\r\n            <div class=\"airInfoDetail\">Cloud coverage</div>`;\n        // Update the HTML elements with the weather information\n        cityNameDiv.innerHTML = cityHTML;\n        temperatureDiv.innerHTML = temperatureHTML;\n        descriptionDiv.innerHTML = descriptionHTML;\n        humiditySection.innerHTML = humidityHTML;\n        windSpeedSection.innerHTML = windSpeedHTML;\n        cloudCoverageSection.innerHTML = cloudCoverageHTML;\n        weatherIcon.src = iconUrl;\n        weatherIcon.alt = description;\n        showImage();\n    }\n}\nfunction showImage() {\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    weatherIcon.style.display = \"inline-block\";\n}\n// Only display weather when the searchBtn is clicked while the btn has class btn_active\nlet btn = document.getElementById(\"idBtn\");\nlet input = document.getElementById(\"idInput\");\nbtn.addEventListener(\"click\", function () {\n    this.classList.toggle(\"btn_active\");\n    input.classList.toggle(\"input_active\");\n    if (!this.classList.contains(\"btn_active\")) {\n        getWeather();\n    }\n    else {\n        input.focus();\n        input.value = '';\n    }\n});\nfunction displayErrorMessage(message) {\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    errorMessageDiv.textContent = message;\n    errorMessageDiv.style.display = 'block';\n}\nfunction renderWeatherElements(data) {\n    const elementsConfig = [\n        { id: \"cityNameDiv\", content: `<h2>${data.cityName}</h2>` },\n        { id: \"temperatureDiv\", content: `<p>${data.temperature}°C</p>` },\n        { id: \"descriptionDiv\", content: `<p>${data.description}</p>` },\n        { id: \"timeDiv\", content: `<p>Time: ${data.time}</p>` },\n        { id: \"humiditySection\", content: `\r\n            <span class=\"airInfoDetail material-icons\">water_drop</span>\r\n            <span class=\"airInfoDetail\">${data.humidity}%</span>\r\n            <div class=\"airInfoDetail\">Humidity</div>` },\n        { id: \"windSpeedSection\", content: `\r\n            <span class=\"airInfoDetail material-icons\">air</span>\r\n            <span class=\"airInfoDetail\">${data.windSpeed} m/s</span>\r\n            <div class=\"airInfoDetail\">Wind speed</div>` },\n        { id: \"cloudCoverageSection\", content: `\r\n            <span class=\"airInfoDetail material-icons\">cloud</span>\r\n            <span class=\"airInfoDetail\">${data.cloudCoverage}%</span>\r\n            <div class=\"airInfoDetail\">Cloud coverage</div>` }\n    ];\n    // Update innerHTML for each element\n    elementsConfig.forEach(({ id, content }) => {\n        const element = document.getElementById(id);\n        if (element) {\n            element.innerHTML = content;\n        }\n    });\n    // Update the weather icon separately\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    if (weatherIcon) {\n        weatherIcon.src = data.iconUrl;\n        weatherIcon.alt = data.description;\n    }\n}\n"],"names":[],"sourceRoot":""}