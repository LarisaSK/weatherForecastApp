{"version":3,"file":"script.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;ACNa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAO,CAAC,wCAAe;AACvB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,mFAAmF,KAAK,SAAS,OAAO;AACxG,8EAA8E,KAAK,SAAS,OAAO;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,6CAA6C;AAC7C,gCAAgC;AAChC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oEAAoE,aAAa;AACjF;AACA;AACA;AACA;AACA,yDAAyD,qBAAqB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAmC,cAAc,QAAQ;AACnE,UAAU,qCAAqC,iBAAiB,SAAS;AACzE,UAAU,qCAAqC,iBAAiB,OAAO;AACvE,UAAU,oCAAoC,UAAU,OAAO;AAC/D,UAAU;AACV,0CAA0C,cAAc;AACxD,wDAAwD;AACxD,UAAU;AACV;AACA,0CAA0C,gBAAgB;AAC1D,0DAA0D;AAC1D,UAAU;AACV,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA,2DAA2D,iBAAiB;AAC5E,2DAA2D,gCAAgC;AAC3F,uCAAuC,SAAS,EAAE,QAAQ;AAC1D;AACA","sources":["webpack://weatherforecastapp/./src/styles.scss?029a","webpack://weatherforecastapp/webpack/bootstrap","webpack://weatherforecastapp/webpack/runtime/make namespace object","webpack://weatherforecastapp/./src/script.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./styles.scss\");\nlet fullForecastData = null; //to store full forecast data globally\n// Function to toggle the navigation menu\nfunction toggleNavMenu() {\n    const navbar = document.getElementById('navbar');\n    const navMenuIcon = document.getElementById('navMenuIcon');\n    const navCloseIcon = document.getElementById('navCloseIcon');\n    // Add event listeners to both the menu toggle button and the close button\n    navMenuIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n    navCloseIcon.addEventListener('click', () => {\n        navbar.classList.toggle('open');\n    });\n}\n// Call the function to initialize the menu toggle functionality\ntoggleNavMenu();\nfunction getWeather() {\n    const apiKey = \"d33f0ce7a09838a09d8022ab1acae3d1\";\n    const city = document.getElementById(\"idInput\").value;\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    const inputField = document.getElementById(\"idInput\");\n    // Clear any previous error message and reset input field border\n    errorMessageDiv.style.display = 'none';\n    inputField.style.border = '1px solid #ccc';\n    if (!city) {\n        displayErrorMessage(\"Please enter a city.\"); // Display error if no city is entered\n        return;\n    }\n    const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;\n    // Fetch current weather\n    fetch(currentWeatherUrl)\n        .then(response => response.json())\n        .then(currentWeatherData => {\n        if (currentWeatherData.cod !== 200) {\n            throw new Error(currentWeatherData.message);\n        }\n        console.log(\"Current Weather Data:\", currentWeatherData); // Log the API response\n        loadFetchedWeatherData(currentWeatherData);\n        // Fetch forecast data\n        return fetch(forecastUrl).then(response => response.json())\n            .then(forecastData => {\n            if (forecastData.cod !== \"200\") {\n                throw new Error(forecastData.message);\n            }\n            console.log(\"Forecast Data:\", forecastData); // Log the API response\n            fullForecastData = forecastData; // Store forecast data globally\n            updateDatesInNav(); // Update dates after fetching data\n        });\n    })\n        .catch(error => {\n        console.error('Error fetching weather data:', error);\n        displayErrorMessage('Failed to fetch weather data. Please try again.');\n    });\n}\nfunction loadFetchedWeatherData(data) {\n    if (data.cod === '404') {\n        document.getElementById(\"descriptionDiv\").innerHTML = `<p>${data.message}</p>`;\n    }\n    else {\n        const weatherData = {\n            temperature: Math.round(data.main.temp - 273.15),\n            iconUrl: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\n            description: data.weather[0].description,\n            humidity: data.main.humidity,\n            windSpeed: Math.round(data.wind.speed),\n            cloudCoverage: data.clouds.all,\n            cityName: data.name\n        };\n        renderWeatherElements(weatherData);\n        showImage();\n    }\n}\nfunction showImage() {\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    weatherIcon.style.display = \"inline-block\";\n}\n// Only display weather when the searchBtn is clicked while the btn has class btn_active\nlet btn = document.getElementById(\"idBtn\");\nlet input = document.getElementById(\"idInput\");\nbtn.addEventListener(\"click\", function () {\n    this.classList.toggle(\"btn_active\");\n    input.classList.toggle(\"input_active\");\n    if (!this.classList.contains(\"btn_active\")) {\n        getWeather();\n    }\n    else {\n        input.focus();\n        input.value = '';\n    }\n});\nfunction displayErrorMessage(message) {\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    errorMessageDiv.textContent = message;\n    errorMessageDiv.style.display = 'block';\n}\nfunction renderWeatherElements(data) {\n    const elementsConfig = [\n        { id: \"cityNameDiv\", content: `<h2>${data.cityName}</h2>` },\n        { id: \"temperatureDiv\", content: `<p>${data.temperature}Â°C</p>` },\n        { id: \"descriptionDiv\", content: `<p>${data.description}</p>` },\n        { id: \"timeDiv\", content: `<p>Time: ${data.time}</p>` },\n        { id: \"humiditySection\", content: `\r\n            <span class=\"airInfoDetail\">${data.humidity}%</span>\r\n            <div class=\"airInfoDetail\">Humidity</div>` },\n        { id: \"windSpeedSection\", content: `\r\n           \r\n            <span class=\"airInfoDetail\">${data.windSpeed} m/s</span>\r\n            <div class=\"airInfoDetail\">Wind speed</div>` },\n        { id: \"cloudCoverageSection\", content: `\r\n            <span class=\"airInfoDetail\">${data.cloudCoverage}%</span>\r\n            <div class=\"airInfoDetail\">Cloud coverage</div>` }\n    ];\n    // Update innerHTML for each element\n    elementsConfig.forEach(({ id, content }) => {\n        const element = document.getElementById(id);\n        if (element) {\n            element.innerHTML = content;\n        }\n    });\n    // Update the weather icon separately\n    const weatherIcon = document.getElementById(\"weatherIcon\");\n    if (weatherIcon) {\n        weatherIcon.src = data.iconUrl;\n        weatherIcon.alt = data.description;\n    }\n}\n//Function to set up click event for navigation\nfunction setUpNavClickEvents() {\n    const forecastDays = document.querySelectorAll('.forecastDays');\n    forecastDays.forEach((dayElement, index) => {\n        dayElement.addEventListener('click', () => {\n            // Remove 'active' class from all forecast days\n            forecastDays.forEach(day => day.classList.remove('active'));\n            // Add 'active' class to the clicked day\n            dayElement.classList.add('active');\n        });\n    });\n}\nsetUpNavClickEvents();\nfunction updateDatesInNav() {\n    const forecastDays = document.querySelectorAll('.forecastDays');\n    const today = new Date();\n    for (let i = 0; i < forecastDays.length; i++) {\n        const date = today;\n        date.setDate(today.getDate() + i);\n        const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });\n        const dayDate = date.toLocaleDateString('en-US', { day: '2-digit', month: 'short' });\n        forecastDays[i].innerText = `${dayName} ${dayDate}`;\n    }\n}\n"],"names":[],"sourceRoot":""}